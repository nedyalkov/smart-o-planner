{"ts":1378927794377,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n\tvar Class = {\n\t\textend: function(proto) {\n\t\t\tvar base = function() {},\n\t\t\t\tmember,\n\t\t\t\tthat = this,\n\t\t\t\tsubclass = proto && proto.init ? proto.init : function () {\n\t\t\t\t\tthat.apply(this, arguments);\n\t\t\t\t},\n\t\t\t\tfn;\n\n\t\t\tbase.prototype = that.prototype;\n\t\t\tfn = subclass.fn = subclass.prototype = new base();\n\n\t\t\tfor (member in proto) {\n\t\t\t\tif (typeof proto[member] === Object && !(proto[member] instanceof Array) && proto[member] !== null) {\n\t\t\t\t\t// Merge object members\n\t\t\t\t\tfn[member] = extend(true, {}, base.prototype[member], proto[member]);\n\t\t\t\t} else {\n\t\t\t\t\tfn[member] = proto[member];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfn.constructor = subclass;\n\t\t\tsubclass.extend = that.extend;\n\n\t\t\treturn subclass;\n\t\t}\n\t};\n\n\tvar Polygon = Class.extend({\n\t\tinit: function(points) {\n\t\t\tthis.points = points;\n\t\t},\n\t\t\n\t\tpointsCount: function() {\n\t\t\treturn this.points.length;\n\t\t},\n\t\t\n\t\tperimeter: function() {\n\t\t\tif (this.points.length < 2)\n\t\t\t\treturn 0;\n\t\t\t\n\t\t\tperimeter = 0;\n\t\t\tfor (i = 0; i < this.points.length; i++) {\n\t\t\t\tvar first = this.points[i];\n\t\t\t\tif (i === this.points.length - 1)\n\t\t\t\t\tvar second = this.points[0];\n\t\t\t\telse\n\t\t\t\t\tvar second = this.points[i + 1];\n\t\t\t\tvar xsDiff = first.x - second.x;\n\t\t\t\tvar ysDiff = first.y - second.y;\n\t\t\t\tperimeter += Math.sqrt(xsDiff * xsDiff + ysDiff * ysDiff);\n\t\t\t}\n\t\t\treturn perimeter;\n\t\t},\n\t\n\t\tarea: function() {\n\t\t\tif (this.points.length < 3)\n\t\t\t\treturn 0;\n\t\t\t\n\t\t\tarea = 0;\n\t\t\tfor (i = 0; i < this.points.length - 1; i++) {\n\t\t\t\tvar first = this.points[i];\n\t\t\t\tvar second = this.points[i + 1];\n\t\t\t\tarea += (first.x + second.x) * (first.y - second.y);\n\t\t\t}\n\t\t\treturn area / 2;\n\t\t}\n\t});\n\t\n\tPolygon.parse = function(string) {\n\t\tvar pointStrings = string.split(' ');\n\t\tvar points = pointStrings.map(function(x) { return g.Point.parse(x); });\n\t\treturn new Polygon(points);\n\t}\n\t\n\tvar g = require('geometry');\n\tg.Point.parse = function(string) {\n\t\tvar parts = string.split(',');\n\t\tvar x = parseFloat(parts[0]);\n\t\tvar y = parseFloat(parts[1]);\n\t\treturn new g.Point(x, y);\n\t}\n\t\n\texports.Polygon = Polygon;\n})();"]],"start1":0,"start2":0,"length1":0,"length2":2036}]],"length":2036}
{"contributors":[],"silentsave":false,"ts":1378927923731,"patch":[[{"diffs":[[0,"\n\t\t\t\n\t\t\t"],[1,"var "],[0,"perimete"]],"start1":936,"start2":936,"length1":16,"length2":20},{"diffs":[[0,"er = 0;\n\t\t\tfor ("],[1,"var "],[0,"i = 0; i < this."]],"start1":955,"start2":955,"length1":32,"length2":36},{"diffs":[[0,"i];\n\t\t\t\t"],[-1,"if"],[1,"var second ="],[0," (i === "]],"start1":1041,"start2":1041,"length1":18,"length2":28},{"diffs":[[0,"gth - 1)"],[1," ? "],[0,"\n\t\t\t\t"],[-1,"\tvar second ="],[1,"               "],[0," this.po"]],"start1":1084,"start2":1084,"length1":34,"length2":39},{"diffs":[[0,"s[0]"],[-1,";"],[1," :"],[0,"\n\t\t\t\t"],[-1,"else\n\t\t\t\t\tvar second ="],[1,"               "],[0," thi"]],"start1":1126,"start2":1126,"length1":36,"length2":30}]],"length":2053,"saved":false}
{"ts":1378927925374,"patch":[[{"diffs":[[0,"nts[i + 1];\n"],[1,"\t\t\t\t                \n"],[0,"\t\t\t\tvar xsDi"]],"start1":1161,"start2":1161,"length1":24,"length2":45}]],"length":2074,"saved":false}
{"ts":1378927939933,"patch":[[{"diffs":[[0,"- 1) ? \n"],[-1,"\t\t\t\t"],[1,"                "],[0,"        "]],"start1":1088,"start2":1088,"length1":20,"length2":32},{"diffs":[[0,"ts[0] :\n"],[-1,"\t\t\t\t"],[1,"      "],[0,"        "]],"start1":1137,"start2":1137,"length1":20,"length2":22},{"diffs":[[0,"                "],[1,"          "],[0,"this.points[i + "]],"start1":1151,"start2":1151,"length1":32,"length2":42},{"diffs":[[0,"1];\n"],[-1,"\t\t\t\t                "],[0,"\n\t\t\t"]],"start1":1193,"start2":1193,"length1":28,"length2":8}]],"length":2078,"saved":false}
{"ts":1378927954295,"patch":[[{"diffs":[[0,"\n\t\t\t\n\t\t\t"],[1,"var "],[0,"area = 0"]],"start1":1433,"start2":1433,"length1":16,"length2":20},{"diffs":[[0,"\t\t\tfor ("],[1,"var "],[0,"i = 0; i"]],"start1":1455,"start2":1455,"length1":16,"length2":20}]],"length":2086,"saved":false}
{"ts":1378928034545,"patch":[[{"diffs":[[0,") {\n"],[-1,"\tvar Class = {\n\t\textend: function(proto) {\n\t\t\tvar base = function() {},\n\t\t\t\tmember,\n\t\t\t\tthat = this,\n\t\t\t\tsubclass = proto && proto.init ? proto.init : function () {\n\t\t\t\t\tthat.apply(this, arguments);\n\t\t\t\t},\n\t\t\t\tfn;\n\n\t\t\tbase.prototype = that.prototype;\n\t\t\tfn = subclass.fn = subclass.prototype = new base();\n\n\t\t\tfor (member in proto) {\n\t\t\t\tif (typeof proto[member] === Object && !(proto[member] instanceof Array) && proto[member] !== null) {\n\t\t\t\t\t// Merge object members\n\t\t\t\t\tfn[member] = extend(true, {}, base.prototype[member], proto[member]);\n\t\t\t\t} else {\n\t\t\t\t\tfn[member] = proto[member];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfn.constructor = subclass;\n\t\t\tsubclass.extend = that.extend;\n\n\t\t\treturn subclass;\n\t\t}\n\t}"],[1,"    var Class = require('oop').Class"],[0,";\n\n\t"]],"start1":10,"start2":10,"length1":701,"length2":44}]],"length":1429,"saved":false}
{"ts":1378928141498,"patch":[[{"diffs":[[0,"equire('"],[1,"./modules/"],[0,"oop').Cl"]],"start1":31,"start2":31,"length1":16,"length2":26}]],"length":1439,"saved":false}
{"ts":1378928148894,"patch":[[{"diffs":[[0,"('./"],[-1,"modules/"],[0,"oop'"]],"start1":37,"start2":37,"length1":16,"length2":8}]],"length":1431,"saved":false}
